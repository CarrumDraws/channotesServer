create or replace function setuser_image(chan_id_input uuid)
returns varchar
language sql
as $$
  SELECT image FROM users WHERE chan_id = chan_id_input;
$$;

create or replace function setuser(first_name_input varchar, last_name_input varchar, username_input varchar, image_input varchar, chan_id_input uuid)
returns table(
  chan_id uuid,
  google_id varchar,
  first_name varchar,
  last_name varchar,
  username varchar,
  email varchar,
  image varchar
  )
language sql
as $$
  UPDATE users SET first_name = first_name_input, last_name = first_name_input, username = username_input, image = image_input WHERE chan_id = chan_id_input RETURNING chan_id, google_id, first_name, last_name, username, email, image;
$$;

create or replace function getuser(chan_id_input uuid)
returns table(
  chan_id uuid,
  google_id varchar,
  first_name varchar,
  last_name varchar,
  username varchar,
  email varchar,
  image varchar,
  friends int) -- Declate Custom Return Types like so! They MUST BE in the correct order as generated by the SQL Query.
language sql
as $$
  SELECT users.*, COUNT(friends.*) AS friends FROM users LEFT JOIN friends ON users.chan_id = friends.chan_id_a WHERE users.chan_id = chan_id_input GROUP BY users.chan_id;
$$;

create or replace function getfriends(chan_id_input uuid)
returns table( -- Return sets of custom data like so
  chan_id uuid,
  first_name varchar,
  last_name varchar,
  username varchar,
  email varchar,
  image varchar)
language sql
as $$
  SELECT users.chan_id, users.first_name, users.last_name, users.username, users.email, users.image FROM users RIGHT JOIN friends ON users.chan_id = friends.chan_id_a WHERE friends.chan_id_b = chan_id_input;
$$;

-- Maybe all my calls should be specifically defined like this. This way, if none returned then data is returned as [], instead of a null object.
create or replace function checkfriend(chan_id_input uuid, user_id_input uuid)
returns table(
  chan_id_a uuid,
  chan_id_b uuid
)
language sql
as $$
  SELECT chan_id_a, chan_id_b FROM friends WHERE chan_id_a = chan_id_input AND chan_id_b = user_id_input;
$$;

create or replace function makefriend(chan_id_a_input uuid, chan_id_b_input uuid)
returns table(
  chan_id_a uuid,
  chan_id_b uuid
)
language sql
as $$
  INSERT INTO friends (chan_id_a, chan_id_b) VALUES (chan_id_a_input, chan_id_b_input) RETURNING chan_id_a, chan_id_b;
$$;

create or replace function deletefriend(chan_id_a_input uuid, chan_id_b_input uuid)
returns table(
  chan_id_a uuid,
  chan_id_b uuid
)
language sql
as $$
  DELETE FROM friends WHERE chan_id_a = chan_id_a_input AND chan_id_b = chan_id_b_input RETURNING chan_id_a, chan_id_b;
$$;

create or replace function getblocks(chan_id_input uuid)
returns table(
    chan_id uuid,
    first_name varchar,
    last_name varchar,
    username varchar,
    email varchar,
    image varchar)
language sql
as $$
  SELECT users.chan_id, users.first_name, users.last_name, users.username, users.email, users.image FROM users LEFT JOIN blocks ON users.chan_id = blocks.chan_id_a WHERE blocks.chan_id = chan_id_input;
$$;

create or replace function checkblock(chan_id_input uuid, user_id_input uuid)
returns table(
  chan_id uuid,
  chan_id_a uuid
)
language sql
as $$
  SELECT chan_id, chan_id_a FROM blocks WHERE chan_id = chan_id_input AND chan_id_a = user_id_input;
$$;

create or replace function block(chan_id_input uuid, user_id_input uuid)
returns table(
  chan_id uuid,
  chan_id_a uuid
)
language sql
as $$
  INSERT INTO blocks (chan_id, chan_id_a) VALUES (chan_id_input, user_id_input) RETURNING chan_id, chan_id_a;
$$;

create or replace function unblock(chan_id_input uuid, user_id_input uuid)
returns table(
  chan_id uuid,
  chan_id_a uuid
)
language sql
as $$
  DELETE FROM blocks WHERE chan_id = chan_id_input AND chan_id_a = user_id_input RETURNING chan_id, chan_id_a;
$$;

create or replace function search(username_input varchar)
returns table(
    chan_id uuid,
    first_name varchar,
    last_name varchar,
    username varchar,
    email varchar,
    image varchar)
language sql
as $$
  SELECT users.chan_id, users.first_name, users.last_name, users.username, users.email, users.image FROM users WHERE UPPER(users.username) LIKE UPPER(username_input);
$$;